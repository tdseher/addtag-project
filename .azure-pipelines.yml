# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

strategy:
  matrix:
    linux:
      image.name: 'ubuntu-latest'
    mac:
      image.name: 'macos-latest'
    windows:
      image.name: 'windows-latest'

pool:
  vmImage: $(image.name)

steps:

- task: UsePythonVersion@0
  inputs:
    versionSpec: '2.7'
    addToPath: false
  displayName: 'Use Python 2.7'
  name: python2

- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.6'
    addToPath: false
  displayName: 'Use Python 3.6'
  name: python3

# linux
#   Python 2.7.16
#   /opt/hostedtoolcache/Python/2.7.16/x64/python
# macOS
#   Python 2.7.16
#   /Users/runner/hostedtoolcache/Python/2.7.16/x64/python
# Windows
#   Python 2.7.16
#   C:\hostedtoolcache\windows\Python\2.7.16\x64\python.exe
- script: |
    $(python2.pythonLocation)/python --version
    $(python2.pythonLocation)/python -c "import sys; print(sys.executable)"
  displayName: Show version and location of 'python2' binary

# linux
#   Python 3.6.9
#   /opt/hostedtoolcache/Python/3.6.9/x64/python
# macOS
#   Python 3.6.9
#   /Users/runner/hostedtoolcache/Python/3.6.9/x64/python
# Windows
#   Python 3.6.8
#   C:\hostedtoolcache\windows\Python\3.6.8\x64\python.exe
- script: |
    $(python3.pythonLocation)/python --version
    $(python3.pythonLocation)/python -c "import sys; print(sys.executable)"
  displayName: Show version and location of 'python3' binary

#### Begin CONDA ####
# Linux
- bash: |
    echo "##vso[task.prependpath]$CONDA/bin"
  condition: eq( variables['Agent.OS'], 'Linux' )
  displayName: Install 'conda' dependencies on Linux

# macOS
# On Hosted macOS, the agent user doesn't have ownership of Miniconda's installation directory/
# We need to take ownership if we want to update conda or install packages globally
# Take ownership of conda installation
#- bash: sudo chown -R $USER $CONDA
- bash: |
    echo "##vso[task.prependpath]$CONDA/bin"
  condition: eq( variables['Agent.OS'], 'Darwin' )
  displayName: Install 'conda' dependencies on macOS

# Windows
- powershell: |
    Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  displayName: Install 'conda' dependencies on Windows

- script: |
    conda info
  displayName: Show version of 'conda' binary
#### End CONDA ####

- script: |
    $(python3.pythonLocation)/python -m pip install setuptools
    $(python3.pythonLocation)/python -m pip install --upgrade pip
    $(python3.pythonLocation)/python -m pip install regex
    $(python3.pythonLocation)/python -m pip install primer3-py
  displayName: Install 'AddTag' dependencies

- script: |
    $(python2.pythonLocation)/python -m pip install setuptools
    $(python2.pythonLocation)/python -m pip install --upgrade pip
    $(python2.pythonLocation)/python -m pip install numpy==1.16.4
    $(python2.pythonLocation)/python -m pip install biopython==1.76
    $(python2.pythonLocation)/python -m pip install git+https://github.com/MicrosoftResearch/Azimuth.git
  displayName: Install 'Azimuth' dependencies

- script: |
    $(python3.pythonLocation)/python -m pip install theano==1.0.4 keras==2.2.4
  displayName: Install 'DeepCpf1/CINDEL' dependencies

#### Begin BLAST+ ####
# Linux
- bash: |
    wget -nv ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/2.9.0/ncbi-blast-2.9.0+-x64-linux.tar.gz
    tar -xf ncbi-blast-2.9.0+-x64-linux.tar.gz
    echo "##vso[task.prependpath]$(Build.SourcesDirectory)/ncbi-blast-2.9.0+/bin"
  condition: eq( variables['Agent.OS'], 'Linux' )
  displayName: Install 'BLAST+' dependencies on Linux

# macOS
#   IMAGE=ncbi-blast-2.9.0+
#   curl -O ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/2.9.0/${IMAGE}.dmg
#   sudo hdiutil attach ${IMAGE}.dmg
#   sudo installer -package /Volumes/${IMAGE}/${IMAGE}.pkg -target /
#   sudo hdiutil detach /Volumes/${IMAGE}
- bash: |
    curl -O ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/2.9.0/ncbi-blast-2.9.0+-x64-macosx.tar.gz
    tar -xf ncbi-blast-2.9.0+-x64-macosx.tar.gz
    echo "##vso[task.prependpath]$(Build.SourcesDirectory)/ncbi-blast-2.9.0+/bin"
  condition: eq( variables['Agent.OS'], 'Darwin' )
  displayName: Install 'BLAST+' dependencies on macOS

# Windows
#   $env:PATH += "$(Build.SourcesDirectory)\ncbi-blast-2.9.0+\bin;"
- powershell: |
    (New-Object System.Net.WebClient).DownloadFile("ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/2.9.0/ncbi-blast-2.9.0+-x64-win64.tar.gz","ncbi-blast-2.9.0+-x64-win64.tar.gz")
    7z.exe x .\ncbi-blast-2.9.0+-x64-win64.tar.gz
    7z.exe x .\ncbi-blast-2.9.0+-x64-win64.tar
    echo "##vso[task.prependpath]$(Build.SourcesDirectory)\ncbi-blast-2.9.0+\bin"
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  displayName: Install 'BLAST+' dependencies on Windows

- script: |
    blastn -version
  displayName: Show version of 'blastn' binary
#### End BLAST+ ####

#### Begin MAFFT ####
# To install this package with 'conda' run the following (Linux and macOS):
#   conda install -c bioconda mafft
- bash: |
    wget -nv https://mafft.cbrc.jp/alignment/software/mafft-7.467-linux.tgz
    tar -xf mafft-7.467-linux.tgz
    echo "##vso[task.prependpath]$(Build.SourcesDirectory)/mafft-linux64/mafftdir/bin"
    echo "##vso[task.setvariable variable=MAFFT_BINARIES]$(Build.SourcesDirectory)/mafft-linux64/mafftdir/libexec"
    echo "##vso[task.setvariable variable=MAFFT]mafft"
  condition: eq( variables['Agent.OS'], 'Linux' )
  displayName: Install 'MAFFT' dependencies on Linux

- bash: |
    curl -O https://mafft.cbrc.jp/alignment/software/mafft-7.467-mac.zip
    unzip mafft-7.467-mac.zip
    echo "##vso[task.prependpath]$(Build.SourcesDirectory)/mafft-mac/mafftdir/bin"
    echo "##vso[task.setvariable variable=MAFFT_BINARIES]$(Build.SourcesDirectory)/mafft-mac/mafftdir/libexec"
    echo "##vso[task.setvariable variable=MAFFT]mafft"
  condition: eq( variables['Agent.OS'], 'Darwin' )
  displayName: Install 'MAFFT' dependencies on macOS

- powershell: |
    Invoke-WebRequest -Uri https://mafft.cbrc.jp/alignment/software/mafft-7.450-win64-signed.zip -OutFile mafft-7.450-win64-signed.zip
    7z.exe x .\mafft-7.450-win64-signed.zip
    echo "##vso[task.setvariable variable=MAFFT_BINARIES]$(Build.SourcesDirectory)\mafft-win\usr\lib\mafft"
    echo "##vso[task.prependpath]$(Build.SourcesDirectory)\mafft-win\usr\bin"
    echo "##vso[task.prependpath]$(Build.SourcesDirectory)\mafft-win"
    echo "##vso[task.setvariable variable=MAFFT]mafft.bat"
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  displayName: Install 'MAFFT' dependencies on Windows

- script: |
    echo MAFFT_BINARIES
    echo $(MAFFT_BINARIES)
    $(MAFFT) --version
  displayName: Show version of 'mafft' binary
#### End MAFFT ####

#### Begin BOWTIE2 ####
# To install this package with 'conda' run the following (Linux and macOS):
#   conda install -c bioconda bowtie2
- bash: |
    wget -nv https://phoenixnap.dl.sourceforge.net/project/bowtie-bio/bowtie2/2.4.1/bowtie2-2.4.1-linux-x86_64.zip
    unzip bowtie2-2.4.1-linux-x86_64.zip
    echo "##vso[task.prependpath]$(Build.SourcesDirectory)/bowtie2-2.4.1-linux-x86_64"
    echo "##vso[task.setvariable variable=BOWTIE2]bowtie2"
    echo "##vso[task.setvariable variable=BOWTIE2_BUILD]bowtie2-build"
  condition: eq( variables['Agent.OS'], 'Linux' )
  displayName: Install 'BOWTIE2' dependencies on Linux

- bash: |
    curl -O https://phoenixnap.dl.sourceforge.net/project/bowtie-bio/bowtie2/2.4.1/bowtie2-2.4.1-macos-x86_64.zip
    unzip bowtie2-2.4.1-macos-x86_64.zip
    echo "##vso[task.prependpath]$(Build.SourcesDirectory)/bowtie2-2.4.1-macos-x86_64"
    echo "##vso[task.setvariable variable=BOWTIE2]bowtie2"
    echo "##vso[task.setvariable variable=BOWTIE2_BUILD]bowtie2-build"
  condition: eq( variables['Agent.OS'], 'Darwin' )
  displayName: Install 'BOWTIE2' dependencies on macOS

- powershell: |
    (New-Object System.Net.WebClient).DownloadFile("https://github.com/BenLangmead/bowtie2/releases/download/v2.3.4.3/bowtie2-2.3.4.3-mingw-x86_64.zip","bowtie2-2.3.4.3-mingw-x86_64.zip")
    7z.exe x .\bowtie2-2.3.4.3-mingw-x86_64.zip
    echo "##vso[task.prependpath]$(Build.SourcesDirectory)\bowtie2-2.3.4.3-mingw-x86_64"
    echo "##vso[task.setvariable variable=BOWTIE2]bowtie2.bat"
    echo "##vso[task.setvariable variable=BOWTIE2_BUILD]bowtie2-build.bat"
    New-Item -Name strawberry-perl -ItemType directory
    (New-Object System.Net.WebClient).DownloadFile("http://strawberryperl.com/download/5.30.2.1/strawberry-perl-5.30.2.1-64bit-portable.zip","strawberry-perl-5.30.2.1-64bit-portable.zip")
    7z.exe x .\strawberry-perl-5.30.2.1-64bit-portable.zip -ostrawberry-perl
    echo "##vso[task.prependpath]$(Build.SourcesDirectory)\strawberry-perl\perl\bin"
    #echo "##vso[task.prependpath]$(Build.SourcesDirectory)\strawberry-perl\c\bin"
    #echo "##vso[task.prependpath]$(Build.SourcesDirectory)\strawberry-perl\perl\site\bin"
    echo "##vso[task.prependpath]$(python2.pythonLocation)"
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  displayName: Install 'BOWTIE2' dependencies on Windows

- script: |
    $(BOWTIE2) --version
    $(BOWTIE2_BUILD) --version
  displayName: Show version of 'bowtie2' binaries
#### End BOWTIE2 ####

#### Begin CAS-OFFINDER ####
- bash: |
    mkdir cas-offinder-2.4
    cd cas-offinder-2.4/
    wget -nv https://versaweb.dl.sourceforge.net/project/cas-offinder/Binaries/2.4/Linux64/cas-offinder
    echo "##vso[task.prependpath]$(Build.SourcesDirectory)/cas-offinder-2.4"
  condition: False # eq( variables['Agent.OS'], 'Linux' )
  displayName: Install 'CAS-OFFINDER' dependencies on Linux

- bash: |
    mkdir cas-offinder-2.4
    cd cas-offinder-2.4/
    curl -O https://phoenixnap.dl.sourceforge.net/project/cas-offinder/Binaries/2.4/Mac/cas-offinder
    echo "##vso[task.prependpath]$(Build.SourcesDirectory)/cas-offinder-2.4"
  condition: False # eq( variables['Agent.OS'], 'Darwin' )
  displayName: Install 'CAS-OFFINDER' dependencies on macOS

- powershell: |
    New-Item -Name cas-offinder-2.4 -ItemType directory
    Invoke-WebRequest -Uri https://versaweb.dl.sourceforge.net/project/cas-offinder/Binaries/2.4/Win64/cas-offinder.exe -OutFile cas-offinder-2.4\cas-offinder.exe -UserAgent NativeHost
    echo "##vso[task.prependpath]$(Build.SourcesDirectory)\cas-offinder-2.4"
  condition: False # eq( variables['Agent.OS'], 'Windows_NT' )
  displayName: Install 'CAS-OFFINDER' dependencies on Windows

- script: |
    cas-offinder
  condition: False
  displayName: Show version of 'cas-offinder' binary
#### End CAS-OFFINDER ####

- script: |
    $(python3.pythonLocation)/python -m pip install pytest pytest-azurepipelines pytest-cov
    $(python3.pythonLocation)/python -m pytest --cov source --cov-report xml --cov-report html tests/
  displayName: PyTest

- script: |
    pwd
    cd $(Build.SourcesDirectory)
    pwd
    cd $(System.DefaultWorkingDirectory)
    pwd
  displayName: Show values of built-in pipeline paths

- script: |
    $(python3.pythonLocation)/python addtag --help
  displayName: Usage

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'
  displayName: 'Publish code coverage results'