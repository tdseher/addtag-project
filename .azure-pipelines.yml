# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

strategy:
  matrix:
    linux:
      image.name: 'ubuntu-latest'
    mac:
      image.name: 'macos-latest'
    windows:
      image.name: 'windows-latest'

pool:
  vmImage: $(image.name)

steps:
#- task: UsePythonVersion@0
#  inputs:
#    versionSpec: '3.6'
#  displayName: 'Use Python 3.6'

# Linux
# /usr/bin/python
# /usr/bin/python3
- bash: |
    export PYTHON2=python
    echo "##vso[task.setvariable variable=PYTHON2]$PYTHON2"
    export PYTHON3=python3
    echo "##vso[task.setvariable variable=PYTHON3]$PYTHON3"
  condition: eq( variables['Agent.OS'], 'Linux' )
  displayName: Get 'python2' and 'python3' on Linux

# macOS
# /usr/local/opt/python@2/bin/python2.7
# /usr/local/opt/python/bin/python3.7
- bash: |
    export PYTHON2=python
    echo "##vso[task.setvariable variable=PYTHON2]$PYTHON2"
    export PYTHON3=python3
    echo "##vso[task.setvariable variable=PYTHON3]$PYTHON3"
  condition: eq( variables['Agent.OS'], 'Darwin' )
  displayName: Get 'python2' and 'python3' on macOS

# Windows
- powershell: |
    Set-Variable -Name PYTHON2 -Value "py -2"
    Write-Host "##vso[task.setvariable variable=PYTHON2]$PYTHON2"
    Set-Variable -Name PYTHON3 -Value "py -3"
    Write-Host "##vso[task.setvariable variable=PYTHON3]$PYTHON3"
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  displayName: Get 'python2' and 'python3' on Windows

- script: |
    echo The PYTHON2 is $(PYTHON2)
    echo The PYTHON3 is $(PYTHON3)
    $(PYTHON2) --version
    $(PYTHON3) --version
    $(PYTHON2) -c "import sys; print(sys.executable)"
    $(PYTHON3) -c "import sys; print(sys.executable)"
  displayName: Test the 'python2' and 'python3' variables

- script: |
    $(PYTHON3) -m pip install setuptools
    $(PYTHON3) -m pip install --upgrade pip
    $(PYTHON3) -m pip install regex
    $(PYTHON3) -m pip install primer3-py
  displayName: Install dependencies

- script: |
    $(PYTHON3) -m pip install pytest pytest-azurepipelines pytest-cov
    $(PYTHON3) -m pytest --cov source --cov-report xml --cov-report html tests/
  displayName: pytest

#- script: |
#    ls
#  displayName: 'List contents of default folder $(Build.SourcesDirectory)'

- script: |
    $(PYTHON3) addtag --help
  displayName: Usage

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'
  displayName: 'Publish code coverage results'